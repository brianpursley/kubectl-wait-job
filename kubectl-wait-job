#!/bin/bash
# 
# This code is licensed under the Creative Commons Attribution-ShareAlike 4.0 International License.
# To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/4.0/
#
# Attribution: This code was inspired by an answer on Stack Overflow licensed under CC BY-SA 4.0.
# Original answer: https://stackoverflow.com/a/60286538/5074828 by Sebastian N (https://stackoverflow.com/users/3745474/sebastian-n)
#

# Check if --help is specified in the arguments and diusplay help text
for arg in "$@"; do
    if [[ "$arg" == "--help" ]]; then
        echo "Usage: kubectl wait-job [ARGS] [OPTIONS]"
        echo ""
        echo "This plugin waits for a Kubernetes job to either complete or fail."
        echo ""
        echo "Arguments:"
        echo "  [kubectl args]  Any args will be passed to kubectl wait."
        echo ""
        echo "Options:"
        echo "  [kubectl options]  Any options will be passed to kubectl wait."
        echo ""
        echo "Example:"
        echo "  kubectl wait-job job-name"
        echo ""
        exit 0
    fi
done

# Make sure there is no --for flag
for arg in "$@"; do
    if [[ "$arg" == "--for" || "$arg" == --for=* ]]; then
        echo "Error: The '--for' flag cannot be used with this plugin."
        exit 2
    fi
done

# Wait for complete and failed conditions in parallel
kubectl wait job "$@" --for=condition=complete > /dev/null &
COMPLETE_PID=$!

kubectl wait job "$@" --for=condition=failed > /dev/null 2> /dev/null &
FAILED_PID=$!

# Wait for one of the processes to exit
while true; do
    # If the process waiting for complete condition has exited, check if it was successful, kill the other process and exit
    if ! kill -0 "$COMPLETE_PID" 2>/dev/null; then        
        kill "$FAILED_PID" > /dev/null 2>&1
        if wait "$COMPLETE_PID"; then
            echo "Job completed successfully"
            exit 0
        else
            echo "error: kubectl wait failed"
            exit 3
        fi
    fi
    
    # If the process waiting for failed condition has exited, check if it was successful, kill the other process and exit
    if ! kill -0 "$FAILED_PID" 2>/dev/null; then
        kill "$COMPLETE_PID" > /dev/null 2>&1
        if wait "$FAILED_PID"; then
            echo "Job failed"
            exit 1
        else
            echo "error: kubectl wait failed"
            exit 3
        fi
    fi
    
    sleep 0.1
done
